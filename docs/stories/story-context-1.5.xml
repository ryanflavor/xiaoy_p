<story-context id="bmad/bmm/workflows/4-implementation/story-context/template" v="1.0">
  <metadata>
    <epicId>1</epicId>
    <storyId>5</storyId>
    <title>端到端观测与指标浮层钩子</title>
    <status>Draft</status>
    <generatedAt>2025-10-21T00:00:00Z</generatedAt>
    <generator>BMAD Story Context Workflow (#yolo)</generator>
    <sourceStoryPath>docs/stories/story-1.5.md</sourceStoryPath>
  </metadata>

  <story>
    <asA>开发与运维团队（Enabler）</asA>
    <iWant>建立 adapter→aggregator→WS→UI 全链路指标采集并在服务端暴露 /metrics，同时提供可被 UI 指标浮层消费的前端指标 API/钩子</iWant>
    <soThat>能实时查看 p50/p95/p99 与慢消费者事件，并据此执行 SLO/错误预算治理与降级决策</soThat>
    <tasks><![CDATA[

- [ ] AC1 — 服务端可观测与指标：ws-gateway（prom-client）与 aggregator-go（client_golang）暴露 /metrics；健康探针 /healthz
- [ ] AC1 — 前端基础指标：SharedWorker 采集 FPS/端到端/带宽/慢消费者事件
- [ ] AC2 — 指标浮层 API：提供查询/订阅接口；示例浮层渲染 p50/p95/p99
- [ ] AC3 — SLO/错误预算：加载阈值配置，记录超阈事件并预留降级钩子

    ]]></tasks>
  </story>

  <acceptanceCriteria><![CDATA[

1. 全链路埋点与指标暴露：服务端暴露 /metrics；UI 采集 FPS、端到端延迟、带宽与慢消费者事件；可选 OpenTelemetry Trace。
2. 指标浮层 API/钩子：可拉取并渲染 FPS、p50/p95/p99、带宽与慢消费者计数；≤500ms 可见。
3. SLO 阈值与错误预算配置就绪：可由 env/config 注入；记录越界事件并为降级预留钩子。
  ]]></acceptanceCriteria>

  <artifacts>
    <docs><![CDATA[
- docs/epics.md — Epic 1 / Story 1.5：定义本故事目标与 AC（端到端埋点、指标浮层 API、SLO/错误预算）
- docs/PRD.md — FR013–FR015、NFR004：端到端观测、降级、SLO/错误预算与可视化要求
- docs/solution-architecture.md — 组件职责与可观测方案（/metrics、慢消费者保护、Grafana/Loki/Tempo）
- docs/tech-spec-epic-1.md — Workflows/NFR：/healthz、/metrics、慢消费者、端到端时延阈值
    ]]></docs>
    <code><![CDATA[
- services/ws-gateway — Node 服务（计划暴露 /metrics 与慢消费者保护）
- services/aggregator-go — Go 服务（计划暴露 /metrics；33ms 增量/2–5s 快照）
- apps/ui — SharedWorker + UI 指标采集与浮层（占位模块，如不存在则按统一结构创建）
    ]]></code>
    <dependencies><![CDATA[
- Node（dev）：vitest、@playwright/test、c8、eslint、prettier（来自根 package.json）
- Go：go 1.22（services/gocore/go.mod）
- Python：pyproject（packages/py-contracts/）
    ]]></dependencies>
  </artifacts>

  <constraints><![CDATA[
- 性能目标：UI 帧时 p95 ≤ 16.7ms / p99 ≤ 25ms；端到端 P95 < 120ms / P99 < 180ms（PRD）
- 降级策略：采样降频 → 字段裁剪 → 面板停更（PRD）
- 指标：/metrics 暴露与 Prometheus 抓取；可选 OpenTelemetry 追踪（Tech Spec / Solution Architecture）
  ]]></constraints>

  <interfaces><![CDATA[
- HTTP：/metrics、/healthz
- UI API：metrics 查询/订阅接口（供指标浮层消费）
  ]]></interfaces>

  <tests>
    <standards><![CDATA[Node: node --test / vitest；E2E: Playwright；Go: testing；前端：单元 + 轻量可视校验]]></standards>
    <locations><![CDATA[test/**, packages/**/test/**, apps/ui/test/**, services/**/test/**]]></locations>
    <ideas><![CDATA[服务端 /metrics 响应存在性；UI FPS/端到端采集函数；阈值越界事件记录；浮层 ≤500ms 可见]]></ideas>
  </tests>
</story-context>

